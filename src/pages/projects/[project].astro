---
import Layout from '../../layouts/Layout.astro';
import { projects } from '../../data/projects';
import '../../assets/project.css';

export async function getStaticPaths() {
    return projects.map(project => ({
        params: { project: project.id },
        props: { project },
    }));
}

const { project } = Astro.props;
const featuredImages = project.images?.filter(img => img.featured) || [];
const remainingImages = project.images?.filter(img => !img.featured) || [];
const remainingCount = remainingImages.length;
const allImages = [...featuredImages, ...remainingImages];
---

<Layout title={`${project.title} - Portfolio Project`} description={project.detailedDescription || project.description}>
    <article class="project-detail">
        <header class="project-header">
            <div class="back-link-wrapper">
                <a href="/#projects" class="back-link">
                    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                        <path d="M19 12H5M12 19l-7-7 7-7"/>
                    </svg>
                    <span>Back to Projects</span>
                </a>
            </div>
            <h1>{project.title}</h1>
            <div class="tags">
                {project.tags.map(tag => (
                    <span class="tag">{tag}</span>
                ))}
            </div>
        </header>

        <div class="project-content">
            <section class="overview">
                <h2>Project Overview</h2>
                <p>{project.detailedDescription || project.description}</p>
                {(project.timeline || project.role) && (
                    <div class="meta">
                        {project.timeline && (
                            <div class="meta-item">
                                <h3>Timeline</h3>
                                <p>{project.timeline}</p>
                            </div>
                        )}
                        {project.role && (
                            <div class="meta-item">
                                <h3>Role</h3>
                                <p>{project.role}</p>
                            </div>
                        )}
                    </div>
                )}
            </section>

            <div class="main-content">
                {project.challenge && (
                    <section class="challenge">
                        <h2>Challenge</h2>
                        <p>{project.challenge}</p>
                    </section>
                )}
                
                {project.solution && (
                    <section class="solution">
                        <h2>Solution</h2>
                        <p>{project.solution}</p>
                    </section>
                )}

                {project.results && (
                    <section class="results">
                        <h2>Results & Impact</h2>
                        <p>{project.results}</p>
                    </section>
                )}

                {project.links && Object.keys(project.links).length > 0 && (
                    <section class="project-links">
                        <h2>Links</h2>
                        <div class="links-grid">
                            {project.links.github && (
                                <a href={project.links.github} target="_blank" rel="noopener noreferrer" class="link-item">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                        <path d="M9 19c-5 1.5-5-2.5-7-3m14 6v-3.87a3.37 3.37 0 0 0-.94-2.61c3.14-.35 6.44-1.54 6.44-7A5.44 5.44 0 0 0 20 4.77 5.07 5.07 0 0 0 19.91 1S18.73.65 16 2.48a13.38 13.38 0 0 0-7 0C6.27.65 5.09 1 5.09 1A5.07 5.07 0 0 0 5 4.77a5.44 5.44 0 0 0-1.5 3.78c0 5.42 3.3 6.61 6.44 7A3.37 3.37 0 0 0 9 18.13V22"></path>
                                    </svg>
                                    <span>GitHub Repository</span>
                                </a>
                            )}
                            {project.links.github2 && (
                                <a href={project.links.github2} target="_blank" rel="noopener noreferrer" class="link-item">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                        <path d="M9 19c-5 1.5-5-2.5-7-3m14 6v-3.87a3.37 3.37 0 0 0-.94-2.61c3.14-.35 6.44-1.54 6.44-7A5.44 5.44 0 0 0 20 4.77 5.07 5.07 0 0 0 19.91 1S18.73.65 16 2.48a13.38 13.38 0 0 0-7 0C6.27.65 5.09 1 5.09 1A5.07 5.07 0 0 0 5 4.77a5.44 5.44 0 0 0-1.5 3.78c0 5.42 3.3 6.61 6.44 7A3.37 3.37 0 0 0 9 18.13V22"></path>
                                    </svg>
                                    <span>GitHub Repository 2</span>
                                </a>
                            )}
                            {project.links.report && (
                                <a href={project.links.report} target="_blank" rel="noopener noreferrer" class="link-item">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                        <path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"></path>
                                        <polyline points="14 2 14 8 20 8"></polyline>
                                        <line x1="16" y1="13" x2="8" y2="13"></line>
                                        <line x1="16" y1="17" x2="8" y2="17"></line>
                                        <line x1="10" y1="9" x2="8" y2="9"></line>
                                    </svg>
                                    <span>Project Report</span>
                                </a>
                            )}
                            {project.links.demo && (
                                <a href={project.links.demo} target="_blank" rel="noopener noreferrer" class="link-item">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                        <rect x="2" y="3" width="20" height="14" rx="2" ry="2"></rect>
                                        <line x1="8" y1="21" x2="16" y2="21"></line>
                                        <line x1="12" y1="17" x2="12" y2="21"></line>
                                    </svg>
                                    <span>Live Demo</span>
                                </a>
                            )}
                            {project.links.poster && (
                                <a href={project.links.poster} target="_blank" rel="noopener noreferrer" class="link-item">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                        <rect x="3" y="3" width="18" height="18" rx="2" ry="2"/>
                                        <circle cx="8.5" cy="8.5" r="1.5"/>
                                        <polyline points="21 15 16 10 5 21"/>
                                    </svg>
                                    <span>View Poster</span>
                                </a>
                            )}
                        </div>
                    </section>
                )}
            </div>

            {project.images && project.images.length > 0 && (
                <section class="project-gallery">
                    <h2>Project Gallery</h2>
                    <p class="gallery-description">Visual documentation of the project's key features and implementation.</p>
                    <div class="gallery-grid">
                        {featuredImages.map((img) => (
                            <figure class="gallery-item featured" data-image={img.url} data-caption={img.caption}>
                                <div class="featured-badge">Featured</div>
                                <img 
                                    src={img.url} 
                                    alt={img.caption} 
                                    class="preview-loaded"
                                    loading="lazy" 
                                    onload="this.classList.add('loaded')"
                                    onerror="this.classList.add('error'); this.src='/placeholder-image.svg'"
                                />
                                <figcaption>{img.caption}</figcaption>
                            </figure>
                        ))}
                    </div>
                    
                    {remainingImages.length > 0 && (
                        <div class="gallery-expansion">
                            <button class="expand-button" id="expandGallery" aria-expanded="false">
                                <span class="button-text">Show More Images ({remainingImages.length})</span>
                                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                    <path d="M19 9l-7 7-7-7"/>
                                </svg>
                            </button>
                            <div class="additional-images hidden" id="additionalImages">
                                <div class="gallery-grid">
                                    {remainingImages.map(img => (
                                        <figure class="gallery-item" data-image={img.url} data-caption={img.caption}>
                                            <img 
                                                src={img.url} 
                                                alt={img.caption} 
                                                class="preview-loaded"
                                                loading="lazy"
                                                onload="this.classList.add('loaded')"
                                                onerror="this.classList.add('error'); this.src='/placeholder-image.svg'"
                                            />
                                            <figcaption>{img.caption}</figcaption>
                                        </figure>
                                    ))}
                                </div>
                            </div>
                        </div>
                    )}
                </section>
            )}
        </div>
    </article>

    <div class="image-modal" id="imageModal">
        <button class="modal-close" id="modalClose">
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <line x1="18" y1="6" x2="6" y2="18"></line>
                <line x1="6" y1="6" x2="18" y2="18"></line>
            </svg>
        </button>
        <button class="modal-prev" id="modalPrev">
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <polyline points="15 18 9 12 15 6"></polyline>
            </svg>
        </button>
        <button class="modal-next" id="modalNext">
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <polyline points="9 18 15 12 9 6"></polyline>
            </svg>
        </button>
        <div class="modal-content">
            <img src="" alt="" id="modalImage" />
            <p class="modal-caption" id="modalCaption"></p>
        </div>
    </div>

    <script define:vars={{ remainingCount, allImages }}>
        // Initialize project data before importing the module
        window.projectData = {
            remainingCount,
            allImages
        };
    </script>
    <script src="../../assets/project.ts"></script>
</Layout>

<style>
    .project-links {
        margin-top: 2rem;
        padding-top: 2rem;
        border-top: 1px solid rgba(var(--border-rgb), 0.1);
    }

    .links-grid {
        display: flex;
        gap: 1rem;
        flex-wrap: wrap;
        margin-top: 1rem;
    }

    .link-item {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        padding: 0.75rem 1rem;
        background: var(--bg-secondary);
        border-radius: 0.5rem;
        text-decoration: none;
        color: var(--text-primary);
        transition: all 0.2s ease;
    }

    .link-item:hover {
        background: color-mix(in srgb, var(--bg-secondary) 90%, var(--primary-color));
        transform: translateY(-2px);
    }

    .link-item svg {
        color: var(--primary-color);
    }

    @media (max-width: 768px) {
        .links-grid {
            flex-direction: column;
        }

        .link-item {
            width: 100%;
        }
    }
</style>