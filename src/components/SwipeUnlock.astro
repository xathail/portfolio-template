---
---
<div class="swipe-container">
    <div class="swipe-area">
        <div class="swipe-handle">
            <div class="handle-icon">ðŸ”’</div>
        </div>
        <div class="progress-bar"></div>
    </div>
    <div class="hint">Slide to unlock. More content below</div>
</div>

<style>
    .swipe-container {
        position: fixed;
        bottom: 2rem;
        left: 50%;
        transform: translateX(-50%);
        z-index: 1000;
        width: 300px;
        opacity: 0;
        animation: fade-in 1s ease forwards;
        animation-delay: 2s;
        transition: opacity 0.3s ease, transform 0.3s ease, visibility 0.3s;
    }

    .swipe-container.hidden {
        opacity: 0 !important;
        transform: translateX(-50%) translateY(20px);
        pointer-events: none;
        visibility: hidden;
        transition: opacity 0.3s ease, transform 0.3s ease, visibility 0.3s;
    }

    .swipe-area {
        background: rgb(var(--primary-color-rgb), 0.05);
        backdrop-filter: blur(8px);
        border-radius: 9999px;
        height: 60px;
        position: relative;
        overflow: hidden;
        border: 2px solid rgb(var(--primary-color-rgb), 0.2);
        box-shadow: 0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1);
    }

    .swipe-handle {
        position: absolute;
        left: 0;
        top: 0;
        height: 100%;
        width: 60px;
        background: linear-gradient(135deg, var(--primary-color), rgb(var(--primary-color-rgb), 0.8));
        border-radius: 9999px;
        cursor: grab;
        display: flex;
        align-items: center;
        justify-content: center;
        user-select: none;
        transition: transform 0.2s ease, box-shadow 0.2s ease;
        box-shadow: 0 2px 4px rgb(var(--primary-color-rgb), 0.3);
    }

    .swipe-handle:hover {
        box-shadow: 0 4px 6px rgb(var(--primary-color-rgb), 0.4);
    }

    .handle-icon {
        font-size: 1.5rem;
        transition: transform 0.3s ease;
    }

    .progress-bar {
        position: absolute;
        left: 0;
        top: 0;
        height: 100%;
        width: 0;
        background: rgb(var(--primary-color-rgb), 0.1);
        pointer-events: none;
    }

    span {
        position: absolute;
        width: 100%;
        text-align: center;
        left: 0;
        color: var(--text-primary);
        font-size: 0.9rem;
        font-weight: 500;
        pointer-events: none;
        opacity: 0.8;
    }

    .hint {
        text-align: center;
        color: var(--text-secondary);
        font-size: 0.8rem;
        margin-top: 0.75rem;
        opacity: 0.8;
        font-weight: 500;
        animation: bounce 2s infinite;
    }

    @keyframes bounce {
        0%, 20%, 50%, 80%, 100% { transform: translateY(0); }
        40% { transform: translateY(-5px); }
        60% { transform: translateY(-3px); }
    }

    @keyframes fade-in {
        from { opacity: 0; transform: translateX(-50%) translateY(20px); }
        to { opacity: 1; transform: translateX(-50%) translateY(0); }
    }
</style>

<script>
    const handle = document.querySelector('.swipe-handle') as HTMLElement;
    const progressBar = document.querySelector('.progress-bar') as HTMLElement;
    const container = document.querySelector('.swipe-container') as HTMLElement;
    const lockedContent = document.querySelector('.locked-content') as HTMLElement;
    const footer = document.querySelector('footer') as HTMLElement;
    
    let isDragging = false;
    let startX = 0;
    let currentX = 0;
    
    const maxDrag = 240; // Maximum drag distance (300px container - 60px handle)
    
    handle?.addEventListener('mousedown', startDragging);
    handle?.addEventListener('touchstart', (e) => {
        e.preventDefault();
        startDragging(e.touches[0]);
    });
    
    window.addEventListener('mousemove', drag);
    window.addEventListener('touchmove', (e) => {
        e.preventDefault();
        drag(e.touches[0]);
    });
    
    window.addEventListener('mouseup', stopDragging);
    window.addEventListener('touchend', stopDragging);
    
    function startDragging(e: MouseEvent | Touch) {
        isDragging = true;
        startX = e.clientX - (currentX || 0);
        handle?.style.setProperty('cursor', 'grabbing');
    }
    
    function drag(e: MouseEvent | Touch) {
        if (!isDragging) return;
        
        const x = e.clientX - startX;
        currentX = Math.max(0, Math.min(x, maxDrag));
        
        const progress = (currentX / maxDrag) * 100;
        
        handle!.style.transform = `translateX(${currentX}px)`;
        progressBar!.style.width = `${progress}%`;
        
        // Rotate the lock icon based on progress
        const icon = handle!.querySelector('.handle-icon') as HTMLElement;
        if (icon) {
            if (progress >= 100) {
                icon.textContent = 'ðŸ”“';
            } else {
                icon.textContent = 'ðŸ”’';
            }
            // Rotate based on progress
            icon.style.transform = `rotate(${progress * 1.8}deg)`;
        }
        
        if (progress >= 100) {
            unlockContent();
        }
    }
    
    function stopDragging() {
        if (!isDragging) return;
        isDragging = false;
        handle?.style.setProperty('cursor', 'grab');
        
        if (currentX < maxDrag) {
            // Reset if not fully dragged
            handle!.style.transform = 'translateX(0)';
            progressBar!.style.width = '0';
            currentX = 0;
            
            // Reset lock icon
            const icon = handle!.querySelector('.handle-icon') as HTMLElement;
            if (icon) {
                icon.textContent = 'ðŸ”’';
                icon.style.transform = 'rotate(0deg)';
            }
        }
    }
    
    function unlockContent() {
        if (lockedContent) {
            lockedContent.style.display = 'block';
            setTimeout(() => {
                lockedContent.style.opacity = '1';
                lockedContent.style.visibility = 'visible';
            }, 10);
        }
        if (footer) {
            footer.style.display = 'block';
            setTimeout(() => {
                footer.style.opacity = '1';
                footer.style.visibility = 'visible';
            }, 10);
        }
        container.style.opacity = '0';
        container.style.visibility = 'hidden';
        container.style.transform = 'translateX(-50%) translateY(20px)';
        setTimeout(() => {
            container.style.display = 'none';
        }, 300);
        localStorage.setItem('portfolioUnlocked', 'true');
    }

    // Check if already unlocked
    if (localStorage.getItem('portfolioUnlocked') === 'true') {
        container.style.display = 'none';
        container.style.opacity = '0';
        container.style.visibility = 'hidden';
        unlockContent();
    }
</script>